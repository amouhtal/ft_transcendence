"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("@nestjs/common");
let RedirectInterceptor = class RedirectInterceptor {
    intercept(context, next) {
        const ctx = context.switchToHttp();
        const response = ctx.getResponse();
        const handler = context.getHandler();
        const options = Reflect.getMetadata('redirectOptions', handler);
        const res$ = next.handle();
        return res$.toPromise().then(result => {
            if (result && this.isRedirect(result)) {
                response.redirect(result.statusCode, result.url);
            }
            else if (this.isRedirect(options)) {
                response.redirect(options.statusCode, options.url);
            }
            else {
                throw new common_1.NotImplementedException();
            }
            return undefined;
        });
    }
    isRedirect(obj) {
        if (obj && obj.hasOwnProperty('statusCode') && obj.hasOwnProperty('url')) {
            return true;
        }
        return false;
    }
};
RedirectInterceptor = __decorate([
    common_1.Injectable()
], RedirectInterceptor);
exports.RedirectInterceptor = RedirectInterceptor;
